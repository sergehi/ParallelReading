Вызов await Task.WhenAll(files.Select(file => CountSpacesInFileAsync(file))) не выполняется в одном потоке. 
Вместо этого он запускает несколько асинхронных задач, которые могут выполняться параллельно, 
но не обязательно в одном потоке.

Как это работает
Асинхронные задачи: 
	Метод CountSpacesInFileAsync(file) возвращает Task, который представляет асинхронную операцию. 
	Когда вы вызываете этот метод для каждого файла в Select, вы создаете коллекцию задач (IEnumerable<Task>).
	Task.WhenAll: Метод Task.WhenAll принимает коллекцию задач и возвращает новую задачу, которая завершится, 
когда все переданные задачи завершатся. Это означает, что все задачи могут выполняться параллельно, 
и Task.WhenAll будет ожидать их завершения.
Параллелизм: 
Хотя Task.WhenAll позволяет задачам выполняться параллельно, фактическое количество потоков, 
которые будут использоваться для выполнения этих задач, зависит от пула потоков .NET 
и текущей нагрузки на систему. Это означает, что задачи могут выполняться в разных потоках, 
но не обязательно в одном.